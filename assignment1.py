# -*- coding: utf-8 -*-
"""Assignment1

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1ljl5D6oBwALjaBWHdsta5oTzvu-4xdll
"""



"""Q. Explain the key features of Python that make it a popular choice for programming.

Ans. Python has several key features that contribute to its popularity:

1. Readability: Python uses indentation and a clean syntax, making code easy to read and understand.
2. Versatility: It's suitable for various applications, from web development to data analysis and machine learning.
3. Large standard library: Python comes with a comprehensive standard library, reducing the need for external dependencies.
4. Cross-platform compatibility: Python runs on multiple operating systems with minimal adjustments.
5. Dynamic typing: Variables don't need explicit type declarations, speeding up development.
6. Interpreted language: Code can be executed line by line, facilitating debugging and testing.
7. Strong community support: A vast ecosystem of libraries, frameworks, and resources is available.
8. Easy to learn: Its straightforward syntax makes it accessible for beginners.

"""



"""Q. Describe the role of predefined keywords in Python and provide examples of how they are used in a program?

Ans. Predefined keywords in Python play a crucial role in the language's syntax and structure. They are reserved words that have special meanings and functions within Python programs. Examples:

1. Conditional statements: `if`, `elif`, and `else` are used for decision-making in the program flow.
2. Loops: `for` and `while` are used for iteration and repeating code blocks.
3. Function definition: `def` is used to define functions.
4. Class definition: `class` is used to define classes in object-oriented programming.
5. Module import: `import` and `from` are used to include external modules or specific functions from modules.
6. Print: print() function used for printing.

etc.

These keywords are fundamental to Python's syntax and are essential for writing structured and functional Python programs. They help in controlling program flow, defining functions and classes, managing exceptions, and more.
"""

'''
Keywords:
Predefined word that hold special meaning and have specific purpose.
Ex. print, type, etc. Its's meaning doesn't change they are defined.
help('keywords') #Output will be all the keywords present in python will be shown.
'''

help('keywords')

for i in range(10):
  print(i)

"""Q. Compare and contrast mutable and immutable objects in Python with examples.
Ans.
#Immutable Objects:
Cannot be changed after creation
Include: integers, floats, strings, tuples, frozensets
When you try to modify them, a new object is created
Examples in the code: strings, tuples, integers


#Mutable Objects:
Can be modified after creation
Include: lists, dictionaries, sets
Modifications affect the original object
Examples in the code: lists, dictionaries, sets

#Key Differences:

1. Immutable: Attempting to modify creates a new object
Mutable: Can be modified in-place
2. Immutable: New object created on modification, may lead to more memory usage
Mutable: Modified in-place, more memory-efficient for large objects.
3. Immutable: Id changes when "modified" (actually creating a new object)
Mutable: Id remains the same after modification
4. Immutable: Changes inside a function don't affect the original object
Mutable: Changes inside a function affect the original object.
"""

# tuples are immutable

tuple1 = (0, 1, 2, 3)
tuple1[0] = 4
print(tuple1)

#List is mutable
my_list = [1, 2, 3]
my_list.append(4)
print(my_list)

my_list.insert(1, 5)
print(my_list)

my_list.remove(2)
print(my_list)

popped_element = my_list.pop(0)
print(my_list)
print(popped_element)

"""Q.  Discuss the different types of operators in Python and p$ovide examples of how they are used.

Ans. when we want to manipulate data we want some operation and for that we use operators.
python operators-Special keywords or symbols that are used to perform some operations on values or variables.
Why? Because we want to manage, do computation and make decision using data.
"""

a=2
b = 3
a+b #here + is operator which help to get the sum as 5.

a=3
b=2

# Arithmetic operators
add = a+b
100-3
3*5
3-5
21/4 #Division
21 % 4 #Modulus
2**5 #This means 2 to the power 5
3**100

# floor operator

4//3  #we want the nearest round value

# Comparision operator
#It compare 2 value >> compare >>return true or false.
2 == 2
2 != 2
5 != 2
10>3
10>=5
10<9
10 <= 14

# Logical operator

#It is of 2 types: and & Or
True - False

# not operator
not True #Output will be False

#6. Assignment operator
a = 10 #We assigned value to a
a

#7. Membership operator.

a = "pwskills"
#We have to check if p is there in a or not?
"p" in a #Output will be True

#8. identity operator
#It compares the location of two objects/variable in memory.
a = 2
b = 3
a is b #Is both referring to same memory block? No

#9. bitwise operator
#Operations at bit level(0 & 1), manipulating individual bits within integer.

#Bit wise representation

#&, |, ~, ^, XOR

"""12. Shift operator: left shift & right shift
Shift operator shifts the bit to the left/right by specified number of position.

Left shift << shifts the bit to left by no. of position by filling 0's on right.
35 << 3
bin(35) # 10011
#35 shift by 3 means 10011000 (3 0's added to right) so value is 280
bin(280) #100011000


5 << 1 #10


right shift operator
280 >> 3 # 35
#remove the number of elements in the binary.
280 >> 3

Q. Explain the concept of type casting in Python with examples.

Ans. Type casting in Python refers to the process of converting a value from one data type to another. This is a fundamental concept in programming, allowing for flexibility in how data is used and manipulated.
It is of two types:
1. Implicit:
Python automatically converts one data type to another when needed.
Example: When adding an integer and a float, Python converts the integer to a float.
2. Explicit:
The programmer manually converts one data type to another using built-in functions.
Common type casting functions:

int(): Converts to integer
float(): Converts to float
str(): Converts to string
bool(): Converts to boolean
list(): Converts to list
tuple(): Converts to tuple
"""

# 1. Implicit Type Casting (Coercion)
print("Implicit Type Casting:")
x = 5
y = 2.0
result = x + y
print(result)

# 2. Explicit Type Casting
print("\nExplicit Type Casting:")

# Integer to Float
int_num = 10
float_num = float(int_num)
print(float_num)

"""Q. How do conditional statements work in Python? Illustrate with examples.
Ans. There are situations in real life when we need to do some specific task and based on some specific conditions, we decide what we should do next. Similarly, there comes a situation in programming where a specific task is to be performed if a specific condition is True. In such cases, conditional statements can be used.
Ex. I will keep checking out the dishes in a buffet.
Helps to code based on some condition.

1. if:-
if condition True:
   block of code will be executed
2. if-else :Two conditions
3. if-elif-else :Multiple condition, we can have multiple elif.
4. nested-if else: You can have multiple if else inside if else.
"""

x = 1
y = 6
if x > 5:
  if y > 5:
    print("hnhdbh")
  else:
    print("gew")
else:
  print("cdrfyth")

# if..else chain statement
letter = "A"

if letter == "B":
    print("letter is B")

else:

    if letter == "C":
        print("letter is C")

    else:

        if letter == "A":
            print("letter is A")

        else:
            print("letter isn't A, B and C")

"""Q. Describe the different types of loops in Python and their use cases with examples.

Ans. Python programming language provides two types of Python loopshecking time.For loop and While loop to handle looping requirements.
It allows you to execute block of code repeatedly.
Two types of loop: while & for

1. while loop:-

It repeatedly executes a block of code until a condition is met.
syntax: while->it is keyword

while condition:
  
  block of code to bee executed
"""

n = 7
i = 1
while i < n:
  print(i)
  i = i + 1

#We have else also with while.
count = 5
while count>0:
  print(count)
  count = count - 1
else:
  print("This will be executed when the while loop run without any break.")

#Break statement in while loop:
n = 7
i = 1
while i < n:
  print(i)
  i = i + 1
  if i == 3:
    break
else:
  print("This will be executed when the while loop run without any break.")

#Continue statement
#It skips the iteration.

n = 7
i = 1
while i < n:
  i = i + 1
  if i == 3:
    continue
  print(i)
else:
  print("This will be executed when the while loop run without any break.")

"""#For loop
Iterate over a sequence of elements.
Strings, list are sequential data.
"""

for i in "pwskills":
  print(i)

#Break statement in for loop:
L = [1,2,"Ajay", "Prachi"]
for i in L:
  if i  == "Ajay":
    break
  print(i)
else:
  print("This will be executed when for loop ends without a break statement")

#Continue statement in for loop:
for i in L:
  if i == "Ajay":
    continue
  print(i)
else:
  print("This will be executed when for loop ends without a break statement")